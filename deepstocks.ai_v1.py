import pandas as pd
import quandl
import datetime
import matplotlib.pyplot as plt   # Import matplotlib
from matplotlib import pylab
import sys
import numpy as np
from matplotlib.dates import date2num
 
from matplotlib.dates import DateFormatter, WeekdayLocator,\
	DayLocator, MONDAY
from mpl_finance import candlestick_ohlc
#from matplotlib.finance import candlestick_ohlc


def ma_crossover_orders(stocks, fast, slow):
    """
    :param stocks: A list of tuples, the first argument in each tuple being a string containing the ticker symbol of each stock (or however you want the stock represented, so long as it's unique), and the second being a pandas DataFrame containing the stocks, with a "Close" column and indexing by date (like the data frames returned by the Yahoo! Finance API)
    :param fast: Integer for the number of days used in the fast moving average
    :param slow: Integer for the number of days used in the slow moving average
 
    :return: pandas DataFrame containing stock orders
 
    This function takes a list of stocks and determines when each stock would be bought or sold depending on a moving average crossover strategy, returning a data frame with information about when the stocks in the portfolio are bought or sold according to the strategy
    """
    fast_str = str(fast) + 'd'
    slow_str = str(slow) + 'd'
    ma_diff_str = fast_str + '-' + slow_str
 
    trades = pd.DataFrame({"Price": [], "Regime": [], "Signal": []})
    for s in stocks:
        # Get the moving averages, both fast and slow, along with the difference in the moving averages
        s[1][fast_str] = np.round(s[1]["Close"].rolling(window = fast, center = False).mean(), 2)
        s[1][slow_str] = np.round(s[1]["Close"].rolling(window = slow, center = False).mean(), 2)
        s[1][ma_diff_str] = s[1][fast_str] - s[1][slow_str]
 
        # np.where() is a vectorized if-else function, where a condition is checked for each component of a vector, and the first argument passed is used when the condition holds, and the other passed if it does not
        s[1]["Regime"] = np.where(s[1][ma_diff_str] > 0, 1, 0)
        # We have 1's for bullish regimes and 0's for everything else. Below I replace bearish regimes's values with -1, and to maintain the rest of the vector, the second argument is apple["Regime"]
        s[1]["Regime"] = np.where(s[1][ma_diff_str] < 0, -1, s[1]["Regime"])
        # To ensure that all trades close out, I temporarily change the regime of the last row to 0
        regime_orig = s[1].loc[:, "Regime"].iloc[-1]
        s[1].loc[:, "Regime"].iloc[-1] = 0
        s[1]["Signal"] = np.sign(s[1]["Regime"] - s[1]["Regime"].shift(1))
        # Restore original regime data
        s[1].loc[:, "Regime"].iloc[-1] = regime_orig
 
        # Get signals
        signals = pd.concat([
            pd.DataFrame({"Price": s[1].loc[s[1]["Signal"] == 1, "Adj. Close"],
                         "Regime": s[1].loc[s[1]["Signal"] == 1, "Regime"],
                         "Signal": "Buy"}),
            pd.DataFrame({"Price": s[1].loc[s[1]["Signal"] == -1, "Adj. Close"],
                         "Regime": s[1].loc[s[1]["Signal"] == -1, "Regime"],
                         "Signal": "Sell"}),
        ])
        signals.index = pd.MultiIndex.from_product([signals.index, [s[0]]], names = ["Date", "Symbol"])
        trades = trades.append(signals)
 
    trades.sort_index(inplace = True)
    trades.index = pd.MultiIndex.from_tuples(trades.index, names = ["Date", "Symbol"])
 
    return trades
 
 
def backtest(signals, cash, port_value = .1, batch = 100):
    """
    :param signals: pandas DataFrame containing buy and sell signals with stock prices and symbols, like that returned by ma_crossover_orders
    :param cash: integer for starting cash value
    :param port_value: maximum proportion of portfolio to risk on any single trade
    :param batch: Trading batch sizes
 
    :return: pandas DataFrame with backtesting results
 
    This function backtests strategies, with the signals generated by the strategies being passed in the signals DataFrame. A fictitious portfolio is simulated and the returns generated by this portfolio are reported.
    """
 
    SYMBOL = 1 # Constant for which element in index represents symbol
    portfolio = dict()    # Will contain how many stocks are in the portfolio for a given symbol
    port_prices = dict()  # Tracks old trade prices for determining profits
    # Dataframe that will contain backtesting report
    results = pd.DataFrame({"Start Cash": [],
                            "End Cash": [],
                            "Portfolio Value": [],
                            "Type": [],
                            "Shares": [],
                            "Share Price": [],
                            "Trade Value": [],
                            "Profit per Share": [],
                            "Total Profit": []})
 
    for index, row in signals.iterrows():
        # These first few lines are done for any trade
        shares = portfolio.setdefault(index[SYMBOL], 0)
        trade_val = 0
        batches = 0
        cash_change = row["Price"] * shares   # Shares could potentially be a positive or negative number (cash_change will be added in the end; negative shares indicate a short)
        portfolio[index[SYMBOL]] = 0  # For a given symbol, a position is effectively cleared
 
        old_price = port_prices.setdefault(index[SYMBOL], row["Price"])
        portfolio_val = 0
        for key, val in portfolio.items():
            portfolio_val += val * port_prices[key]
 
        if row["Signal"] == "Buy" and row["Regime"] == 1:  # Entering a long position
            batches = np.floor((portfolio_val + cash) * port_value) // np.ceil(batch * row["Price"]) # Maximum number of batches of stocks invested in
            trade_val = batches * batch * row["Price"] # How much money is put on the line with each trade
            cash_change -= trade_val  # We are buying shares so cash will go down
            portfolio[index[SYMBOL]] = batches * batch  # Recording how many shares are currently invested in the stock
            port_prices[index[SYMBOL]] = row["Price"]   # Record price
            old_price = row["Price"]
        elif row["Signal"] == "Sell" and row["Regime"] == -1: # Entering a short
            pass
            # Do nothing; can we provide a method for shorting the market?
        #else:
            #raise ValueError("I don't know what to do with signal " + row["Signal"])
 
        pprofit = row["Price"] - old_price   # Compute profit per share; old_price is set in such a way that entering a position results in a profit of zero
 
        # Update report
        results = results.append(pd.DataFrame({
                "Start Cash": cash,
                "End Cash": cash + cash_change,
                "Portfolio Value": cash + cash_change + portfolio_val + trade_val,
                "Type": row["Signal"],
                "Shares": batch * batches,
                "Share Price": row["Price"],
                "Trade Value": abs(cash_change),
                "Profit per Share": pprofit,
                "Total Profit": batches * batch * pprofit
            }, index = [index]))
        cash += cash_change  # Final change to cash balance
 
    results.sort_index(inplace = True)
    results.index = pd.MultiIndex.from_tuples(results.index, names = ["Date", "Symbol"])
 
    return results
 
def pandas_candlestick_ohlc(dat, stick = "day", adj = False, otherseries = None):
	"""
	:param dat: pandas DataFrame object with datetime64 index, and float columns "Open", "High", "Low", and "Close", likely created via DataReader from "yahoo"
	:param stick: A string or number indicating the period of time covered by a single candlestick. Valid string inputs include "day", "week", "month", and "year", ("day" default), and any numeric input indicates the number of trading days included in a period
	:param adj: A boolean indicating whether to use adjusted prices
	:param otherseries: An iterable that will be coerced into a list, containing the columns of dat that hold other series to be plotted as lines
 
	This will show a Japanese candlestick plot for stock data stored in dat, also plotting other series if passed.
	"""
	mondays = WeekdayLocator(MONDAY)        # major ticks on the mondays
	alldays = DayLocator()              # minor ticks on the days
	dayFormatter = DateFormatter('%d')      # e.g., 12
 
	# Create a new DataFrame which includes OHLC data for each period specified by stick input
	fields = ["Open", "High", "Low", "Close"]
	if adj:
		fields = ["Adj. " + s for s in fields]
	transdat = dat.loc[:,fields]
	transdat.columns = pd.Index(["Open", "High", "Low", "Close"])
	if (type(stick) == str):
		if stick == "day":
			plotdat = transdat
			stick = 1 # Used for plotting
		elif stick in ["week", "month", "year"]:
			if stick == "week":
				transdat["week"] = pd.to_datetime(transdat.index).map(lambda x: x.isocalendar()[1]) # Identify weeks
			elif stick == "month":
				transdat["month"] = pd.to_datetime(transdat.index).map(lambda x: x.month) # Identify months
			transdat["year"] = pd.to_datetime(transdat.index).map(lambda x: x.isocalendar()[0]) # Identify years
			grouped = transdat.groupby(list(set(["year",stick]))) # Group by year and other appropriate variable
			plotdat = pd.DataFrame({"Open": [], "High": [], "Low": [], "Close": []}) # Create empty data frame containing what will be plotted
			for name, group in grouped:
				plotdat = plotdat.append(pd.DataFrame({"Open": group.iloc[0,0],
											"High": max(group.High),
											"Low": min(group.Low),
											"Close": group.iloc[-1,3]},
										   index = [group.index[0]]))
			if stick == "week": stick = 5
			elif stick == "month": stick = 30
			elif stick == "year": stick = 365
 
	elif (type(stick) == int and stick >= 1):
		transdat["stick"] = [np.floor(i / stick) for i in range(len(transdat.index))]
		grouped = transdat.groupby("stick")
		plotdat = pd.DataFrame({"Open": [], "High": [], "Low": [], "Close": []}) # Create empty data frame containing what will be plotted
		for name, group in grouped:
			plotdat = plotdat.append(pd.DataFrame({"Open": group.iloc[0,0],
										"High": max(group.High),
										"Low": min(group.Low),
										"Close": group.iloc[-1,3]},
									   index = [group.index[0]]))
 
	else:
		raise ValueError('Valid inputs to argument "stick" include the strings "day", "week", "month", "year", or a positive integer')
 
 
	# Set plot parameters, including the axis object ax used for plotting
	fig, ax = plt.subplots()
	fig.subplots_adjust(bottom=0.2)

	if plotdat.index[-1] - plotdat.index[0] < pd.Timedelta('730 days'):
		weekFormatter = DateFormatter('%b %d')  # e.g., Jan 12
		ax.xaxis.set_major_locator(mondays)
		ax.xaxis.set_minor_locator(alldays)
	else:
		weekFormatter = DateFormatter('%b %d, %Y')
	ax.xaxis.set_major_formatter(weekFormatter)
 
	ax.grid(True)

	# Create the candelstick chart
	candlestick_ohlc(ax, list(zip(list(date2num(plotdat.index.tolist())), plotdat["Open"].tolist(), plotdat["High"].tolist(),
					  plotdat["Low"].tolist(), plotdat["Close"].tolist())),
					  colorup = "black", colordown = "red", width = stick * .4)
 
	# Plot other series (such as moving averages) as lines
	if otherseries != None:
		if type(otherseries) != list:
			otherseries = [otherseries]
		dat.loc[:,otherseries].plot(ax = ax, lw = 1.3, grid = True)
 
	ax.xaxis_date()
	ax.autoscale_view()
	plt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')
 
	plt.show()
  
# We will look at stock prices over the past year, starting at January 1, 2016
#start = datetime.datetime(2016,1,1)

# Let's get Apple stock data; Apple's ticker symbol is AAPL
# First argument is the series we want, second is the source ("yahoo" for Yahoo! Finance), third is the start date, fourth is the end date


stock_list = ["AAPL", "GE", "BAC", "VZ", "DIS", "KO", "JPM", "FB", "GOOGL"]
s = "AAPL"

start = datetime.datetime(2016,1,1)
end = datetime.date.today()

for stock in stock_list:
    print(stock)
    # Let's get Apple stock data; Apple's ticker symbol is AAPL
    # First argument is the series we want, second is the source ("yahoo" for Yahoo! Finance), third is the start date, fourth is the end date
    stock = quandl.get("WIKI/" + stock, start_date=start, end_date=end, authtoken='ZckBtNpVuFexBrr2Lraa')

    #apple.to_csv("apple.csv")
    #apple = pd.read_csv("apple.csv")

    stock["20d"] = np.round(stock["Adj. Close"].rolling(window = 20, center = False).mean(), 2)
    stock["50d"] = np.round(stock["Adj. Close"].rolling(window = 50, center = False).mean(), 2)


    #volume = stock["Volume"]
    #price = stock["Adj. Close"]

    #stock["vwap"] = (volume * price).cumsum() / volume.cumsum()

    stock['20d-50d'] = stock['20d'] - stock['50d']
    print(len(stock['20d-50d']))

    zero_crossings = np.where(np.diff(np.sign(stock['20d-50d'])))[0]

    for zero_crossing in zero_crossings:
        print(stock['20d-50d'][zero_crossing])

    print(zero_crossings)

    stock.tail()

    pandas_candlestick_ohlc(stock, otherseries = ["20d", "50d", '20d-50d'], adj=True)
    sys.exit()
